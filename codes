pip install opencv-python
  
  import requests

# Download YOLOv3 weights
url_weights = "https://pjreddie.com/media/files/yolov3.weights"
response_weights = requests.get(url_weights)

with open("yolov4.weights", "wb") as f:
    f.write(response_weights.content)

# Download YOLOv3 configuration file
url_cfg = "https://github.com/pjreddie/darknet/blob/master/cfg/yolov3.cfg?raw=true"
response_cfg = requests.get(url_cfg)

with open("yolov4.cfg", "wb") as f:
    f.write(response_cfg.content)

# Download YOLOv3 class names
url_names = "https://github.com/pjreddie/darknet/blob/master/data/coco.names?raw=true"
response_names = requests.get(url_names)

with open("coco.names", "wb") as f:
    f.write(response_names.content)

      import cv2
import numpy as np

net = cv2.dnn.readNet("yolov4.weights", "yolov4.cfg")
classes = []
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]
layer_names = net.getUnconnectedOutLayersNames()

  from IPython.display import Image, display
def detect_objects(image_path):
    img = cv2.imread(image_path)
    height, width, _ = img.shape

    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(layer_names)

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = int(detection[1])
            confidence = scores[class_id]
            if confidence > 0.5:  # Adjust confidence threshold as needed
                # Map YOLO coordinates to image coordinates
                if confidence > 0.5:
                    center_x, center_y, w, h = (detection[:4] * np.array([width, height, width, height])).astype(int)
                    x, y = int(center_x - w / 2), int(center_y - h / 2)
                     # Draw bounding box
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
                     # Annotate with width and height
                    text = f"Width: {w}, Height: {h}"
                    cv2.putText(img, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)


    _, img_png = cv2.imencode('.png', img)
    display(Image(data=img_png.tobytes()))

# Specify the path to your image
image_path = "/kaggle/input/image-for-detection/Transpo-Mumbaitraffic-1079622456.webp"
detect_objects(image_path)
